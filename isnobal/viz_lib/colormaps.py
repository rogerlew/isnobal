from __future__ import print_function

import math
import os

from pprint import pprint as pp

import matplotlib.pyplot as plt
import matplotlib as mpl
from matplotlib.colors import Normalize

import numpy as np

from isnobal.isnobalconst import *

def _buildLinearSegmentedColormap(x, C, name):
    cdict = dict(red=[], green=[], blue=[], alpha=[])

    for j, boundary in enumerate(x):
        for i, c in enumerate('red green blue alpha'.split()):
            y0 = y1 = C[j][i]
            cdict[c].append((boundary, y0, y1))
            
    return  mpl.colors.LinearSegmentedColormap(name, cdict)

#
# Snow Water Equivalent (SWE) colormap based on SNOTEL SWE
#

_swe = [
         (  0,   0,   0,   0),  #  0 in
         (215, 245, 244, 100),  #  0.0000 -  0.0039 in
         (165, 217, 250, 190),  #  0.0039 -  0.1968 in
         (128, 164, 242, 255),  #  0.1968 -  0.3930 in
         ( 93, 100, 232, 255),  #  0.3930 -  0.9840 in
         ( 91,  56, 217, 255),  #  0.9840 -  1.9600 in
         (113,  26, 219, 255),  #  1.9600 -  3.9300 in
         (176,  43, 217, 255),  #  3.9300 -  5.9000 in
         (232,  77, 224, 255),  #  5.9000 -  9.8400 in
         (232,  77, 224, 255),  #  9.8400 - 19.6800 in
         (250, 150, 188, 255),  # 19.6800 - 29.5200 in
         (255, 198, 194, 255),  # 29.5200 - 39.3700 in
         (255, 224, 222, 255)   # 39.3700 - 78.7400 in
       ]

_swe = np.array(_swe, dtype=np.float32) / 255.0

x = [0.0, 0.0039, 0.1968, 0.3930, 0.9840, 1.9600, 3.9300,
     5.9000, 9.8400, 19.6800, 29.5200, 39.3700, 78.7400]

_swe_norm = Normalize(0, math.log10(78.7400 + 1), clip=True)
swe_norm_m = lambda x: _swe_norm(np.log10(np.array(x) * M_TO_IN + 1))
swe_norm_in = lambda x: _swe_norm(np.log10(np.array(x) + 1))
swe_cm = _buildLinearSegmentedColormap(swe_norm_in(x), _swe, 'swe_cm')

#
# Radiation 2-d longwave and solar
#

def _Luv_to_RGB(L, u, v):

    from colormath.color_objects import LuvColor, AdobeRGBColor
    from colormath.color_conversions import convert_color
    
    luv_obj = LuvColor(L, u, v, illuminant='d65')
    return convert_color(luv_obj, AdobeRGBColor).get_value_tuple()

Luv_to_RGB = np.vectorize(_Luv_to_RGB)

def _radiation2d_cm(x):
    if not hasattr(x, 'imag'):
        raise ValueError('Expecting complex type')

    L0, Lend = 35, 90
    L = L0 + x.real * (Lend - L0)
    u = 32.5
    
    v0, vend = -30, 35
    v = v0 + x.imag * (vend - v0)
    
    rgb = np.array(Luv_to_RGB(L,u,v)).T

    if hasattr(x, 'shape'):
        rgba = np.ones(list(x.shape) + [4])
        rgba[:,:,0] = rgb[:,:,0]
        rgba[:,:,1] = rgb[:,:,1]
        rgba[:,:,2] = rgb[:,:,2]

    else:
        rgb = _Luv_to_RGB(L, u, v)
        rgba = tuple(list(rgb) + [1.0])

    return rgba

# using colormath is pretty slow so a lookup table (4d array) was
# built and saved to "_rad2d.npy"
# The speedup is about 7x

"""
_x = np.mgrid[0:256,0:256]
_rad2d_x = np.zeros((256, 256), dtype=np.complex)
_rad2d_x.real = _x[0] / 255.
_rad2d_x.imag = _x[1] / 255.
_rad2d = _radiation2d_cm(_rad2d_x)
np.save('_rad2d.npy', _rad2d)
"""

this_dir, this_filename = os.path.split(__file__)
_rad2d = np.load(os.path.join(this_dir, '_rad2d.npy'))

def radiation2d_cm(x):
    if not hasattr(x, 'imag'):
        raise ValueError('Expecting complex type')

    rgba = np.ones(list(x.shape)+[4])

    for i in xrange(x.shape[0]):
        for j in xrange(x.shape[1]):
            real = int(math.floor(x[i,j].real * 255.99999))
            imag = int(math.floor(x[i,j].imag * 255.99999))
            rgba[i,j,:] = _rad2d[real, imag, :]

    return rgba
    
#
# Net Solar Radiation (S_n) colormap
#

_s_n = [(0.040328180005382734, 0.6700056762728338, 0.5600774058726792, 1.0),
 (0.06911319981308738, 0.6693270687843829, 0.5600890708342857, 1.0),
 (0.08791043795158054, 0.668644322598397, 0.5601007923311833, 1.0),
 (0.10286812475867242, 0.6679574145938147, 0.5601125704971951, 1.0),
 (0.1156408803711737, 0.6672663214485821, 0.5601244054661105, 1.0),
 (0.12696200468947305, 0.6665710196368217, 0.5601362973716847, 1.0),
 (0.13723174755011106, 0.6658714854259509, 0.560148246347638, 1.0),
 (0.14669648519124273, 0.6651676948737486, 0.5601602525276563, 1.0),
 (0.15552039816581129, 0.6644596238253708, 0.5601723160453908, 1.0),
 (0.16381926262341426, 0.6637472479103108, 0.5601844370344575, 1.0),
 (0.17167826657566554, 0.6630305425393056, 0.5601966156284377, 1.0),
 (0.1791622044901567, 0.6623094829011876, 0.5602088519608769, 1.0),
 (0.18632168842648014, 0.6615840439596764, 0.5602211461652856, 1.0),
 (0.19319712528515576, 0.6608542004501144, 0.5602334983751386, 1.0),
 (0.1998213688607371, 0.6601199268761417, 0.5602459087238748, 1.0),
 (0.20622154874205992, 0.6593811975063099, 0.5602583773448973, 1.0),
 (0.2124203678918963, 0.6586379863706329, 0.5602709043715731, 1.0),
 (0.21843704592470856, 0.6578902672570747, 0.560283489937233, 1.0),
 (0.22428801942084664, 0.6571380137079712, 0.5602961341751714, 1.0),
 (0.22998747152738108, 0.6563811990163846, 0.5603088372186461, 1.0),
 (0.2355477390247043, 0.6556197962223901, 0.5603215992008782, 1.0),
 (0.2409796297653167, 0.6548537781092916, 0.5603344202550518, 1.0),
 (0.2462926734424445, 0.6540831171997666, 0.560347300514314, 1.0),
 (0.2514953220119169, 0.6533077857519372, 0.5603602401117749, 1.0),
 (0.256595111573258, 0.6525277557553648, 0.5603732391805069, 1.0),
 (0.2615987943811981, 0.6517429989269709, 0.5603862978535449, 1.0),
 (0.26651244744622277, 0.6509534867068749, 0.5603994162638862, 1.0),
 (0.27134156259652525, 0.6501591902541557, 0.5604125945444903, 1.0),
 (0.27609112172037925, 0.6493600804425266, 0.5604258328282784, 1.0),
 (0.2807656600582593, 0.6485561278559284, 0.5604391312481337, 1.0),
 (0.2853693197806205, 0.6477473027840351, 0.560452489936901, 1.0),
 (0.289905895609702, 0.6469335752176704, 0.5604659090273864, 1.0),
 (0.2943788738800593, 0.6461149148441332, 0.5604793886523574, 1.0),
 (0.2987914661528685, 0.6452912910424313, 0.5604929289445425, 1.0),
 (0.30314663828212496, 0.6444626728784181, 0.5605065300366314, 1.0),
 (0.30744713566115717, 0.6436290290998317, 0.5605201920612746, 1.0),
 (0.3116955052440881, 0.6427903281312354, 0.5605339151510828, 1.0),
 (0.31589411483066565, 0.6419465380688529, 0.5605476994386275, 1.0),
 (0.3200451700179097, 0.6410976266753012, 0.5605615450564405, 1.0),
 (0.3241507291536993, 0.6402435613742118, 0.5605754521370134, 1.0),
 (0.32821271657204465, 0.6393843092447451, 0.5605894208127984, 1.0),
 (0.33223293434474893, 0.6385198370159886, 0.5606034512162066, 1.0),
 (0.3362130727472291, 0.6376501110612396, 0.5606175434796092, 1.0),
 (0.34015471960592136, 0.6367750973921689, 0.560631697735337, 1.0),
 (0.34405936866954856, 0.6358947616528611, 0.5606459141156798, 1.0),
 (0.3479284271256775, 0.6350090691137299, 0.5606601927528864, 1.0),
 (0.35176322236654517, 0.6341179846653047, 0.5606745337791648, 1.0),
 (0.3555650080935553, 0.6332214728118835, 0.5606889373266815, 1.0),
 (0.3593349698375317, 0.632319497665052, 0.5607034035275617, 1.0),
 (0.36307422996145594, 0.6314120229370621, 0.5607179325138891, 1.0),
 (0.3667838522035875, 0.6304990119340671, 0.5607325244177056, 1.0),
 (0.37046484581139894, 0.6295804275492107, 0.5607471793710109, 1.0),
 (0.37411816931033537, 0.6286562322555657, 0.5607618975057631, 1.0),
 (0.3777447339459549, 0.6277263880989157, 0.5607766789538776, 1.0),
 (0.38134540683327195, 0.6267908566903803, 0.5607915238472275, 1.0),
 (0.38492101384309185, 0.6258495991988747, 0.5608064323176433, 1.0),
 (0.3884723422515992, 0.6249025763434033, 0.5608214044969126, 1.0),
 (0.39200014317643267, 0.6239497483851792, 0.5608364405167802, 1.0),
 (0.39550513381983887, 0.6229910751195675, 0.5608515405089475, 1.0),
 (0.39898799953718933, 0.622026515867846, 0.5608667046050729, 1.0),
 (0.4024493957471388, 0.6210560294687781, 0.5608819329367711, 1.0),
 (0.4058899496979446, 0.6200795742699952, 0.5608972256356132, 1.0),
 (0.4093102621029232, 0.6190971081191777, 0.5609125828331264, 1.0),
 (0.41271090865665483, 0.6181085883550369, 0.560928004660794, 1.0),
 (0.41609244144236446, 0.6171139717980827, 0.5609434912500548, 1.0),
 (0.4194553902398321, 0.61611321474118, 0.5609590427323038, 1.0),
 (0.42280026374227053, 0.6151062729398812, 0.5609746592388909, 1.0),
 (0.4261275506897588, 0.6140931016025322, 0.5609903409011215, 1.0),
 (0.4294377209261033, 0.6130736553801418, 0.5610060878502563, 1.0),
 (0.4327312263853222, 0.6120478883560125, 0.5610219002175106, 1.0),
 (0.4360085020133859, 0.6110157540351198, 0.5610377781340546, 1.0),
 (0.43926996663030254, 0.609977205333238, 0.5610537217310131, 1.0),
 (0.44251602373719134, 0.6089321945658006, 0.5610697311394651, 1.0),
 (0.4457470622725495, 0.6078806734364912, 0.5610858064904442, 1.0),
 (0.44896345732155984, 0.6068225930255531, 0.5611019479149376, 1.0),
 (0.4521655707819335, 0.605757903777812, 0.5611181555438869, 1.0),
 (0.45535375198949263, 0.6046865554904015, 0.5611344295081867, 1.0),
 (0.4585283383064105, 0.6036084973001834, 0.5611507699386857, 1.0),
 (0.46168965567479303, 0.6025236776708518, 0.5611671769661856, 1.0),
 (0.46483801913804945, 0.601432044379713, 0.5611836507214414, 1.0),
 (0.46797373333230724, 0.6003335445041305, 0.5612001913351611, 1.0),
 (0.47109709294993857, 0.5992281244076243, 0.5612167989380051, 1.0),
 (0.47420838317710184, 0.5981157297256131, 0.5612334736605871, 1.0),
 (0.4773078801070466, 0.59699630535079, 0.5612502156334727, 1.0),
 (0.4803958511307962, 0.5958697954181186, 0.5612670249871797, 1.0),
 (0.4834725553067009, 0.5947361432894371, 0.5612839018521785, 1.0),
 (0.48653824371022825, 0.5935952915376591, 0.5613008463588909, 1.0),
 (0.4895931597652694, 0.5924471819305567, 0.5613178586376905, 1.0),
 (0.492637539558128, 0.591291755414113, 0.5613349388189025, 1.0),
 (0.49567161213528876, 0.5901289520954307, 0.5613520870328035, 1.0),
 (0.4986955997859651, 0.5889587112251796, 0.5613693034096212, 1.0),
 (0.5017097183103698, 0.587780971179571, 0.5613865880795343, 1.0),
 (0.5047141772745691, 0.5865956694418406, 0.5614039411726722, 1.0),
 (0.5077091802527344, 0.5854027425832251, 0.5614213628191151, 1.0),
 (0.5106949250575342, 0.5842021262434144, 0.5614388531488935, 1.0),
 (0.5136716039593744, 0.5829937551104615, 0.5614564122919882, 1.0),
 (0.5166394038951233, 0.5817775629001333, 0.5614740403783299, 1.0),
 (0.5195985066669445, 0.5805534823346801, 0.5614917375377996, 1.0),
 (0.5225490891317854, 0.5793214451210068, 0.5615095039002275, 1.0),
 (0.5254913233820641, 0.5780813819282227, 0.5615273395953937, 1.0),
 (0.5284253769180358, 0.576833222364549, 0.5615452447530276, 1.0),
 (0.5313514128123089, 0.575576894953562, 0.5615632195028074, 1.0),
 (0.5342695898669328, 0.5743123271097463, 0.5615812639743607, 1.0),
 (0.5371800627634702, 0.573039445113336, 0.5615993782972637, 1.0),
 (0.5400829822064211, 0.5717581740844165, 0.5616175626010411, 1.0),
 (0.5429784950603638, 0.570468437956261, 0.5616358170151662, 1.0),
 (0.5458667444811349, 0.5691701594478723, 0.5616541416690604, 1.0),
 (0.5487478700413663, 0.5678632600357039, 0.5616725366920933, 1.0),
 (0.5516220078506691, 0.5665476599245259, 0.561691002213582, 1.0),
 (0.5544892906707407, 0.565223278017408, 0.5617095383627918, 1.0),
 (0.5573498480256524, 0.5638900318847827, 0.561728145268935, 1.0),
 (0.5602038063075578, 0.5625478377325578, 0.5617468230611715, 1.0),
 (0.5630512888780602, 0.5611966103692388, 0.5617655718686082, 1.0),
 (0.5658924161654402, 0.5598362631720261, 0.561784391820299, 1.0),
 (0.56872730575796, 0.558466708051844, 0.5618032830452443, 1.0),
 (0.571556072493427, 0.5570878554172655, 0.5618222456723915, 1.0),
 (0.5743788285452012, 0.5556996141372834, 0.5618412798306338, 1.0),
 (0.5771956835048127, 0.5543018915028883, 0.5618603856488111, 1.0),
 (0.580006744461357, 0.5528945931874009, 0.5618795632557091, 1.0),
 (0.5828121160778112, 0.5514776232055133, 0.561898812780059, 1.0),
 (0.5856119006644229, 0.550050883870985, 0.5619181343505383, 1.0),
 (0.5884061982492985, 0.5486142757529401, 0.5619375280957691, 1.0),
 (0.5911951066463319, 0.5471676976307063, 0.5619569941443195, 1.0),
 (0.5939787215205774, 0.5457110464471417, 0.5619765326247023, 1.0),
 (0.5967571364512021, 0.5442442172603779, 0.5619961436653749, 1.0),
 (0.5995304429921081, 0.542767103193923, 0.5620158273947397, 1.0),
 (0.6022987307303413, 0.541279595385047, 0.5620355839411437, 1.0),
 (0.6050620873423763, 0.5397815829313833, 0.5620554134328781, 1.0),
 (0.6078205986483757, 0.5382729528356659, 0.5620753159981778, 1.0),
 (0.6105743486645063, 0.5367535899485247, 0.5620952917652222, 1.0),
 (0.6133234196534031, 0.5352233769092534, 0.5621153408621341, 1.0),
 (0.6160678921728528, 0.5336821940844605, 0.56213546341698, 1.0),
 (0.6188078451227771, 0.5321299195045138, 0.5621556595577695, 1.0),
 (0.621543355790586, 0.530566428797676, 0.5621759294124556, 1.0),
 (0.6242744998949705, 0.5289915951218296, 0.5621962731089342, 1.0),
 (0.6270013516281964, 0.5274052890936843, 0.5622166907750439, 1.0),
 (0.6297239836969638, 0.5258073787153494, 0.5622371825385659, 1.0),
 (0.6324424673618918, 0.5241977292981512, 0.5622577485272239, 1.0),
 (0.6351568724756785, 0.522576203383569, 0.5622783888686838, 1.0),
 (0.6378672675199979, 0.5209426606611541, 0.5622991036905531, 1.0),
 (0.6405737196411786, 0.5192969578832887, 0.5623198931203819, 1.0),
 (0.6432762946847136, 0.5176389487766372, 0.5623407572856612, 1.0),
 (0.6459750572286472, 0.5159684839501314, 0.5623616963138239, 1.0),
 (0.6486700706158877, 0.5142854107993164, 0.5623827103322439, 1.0),
 (0.651361396985478, 0.5125895734068899, 0.5624037994682359, 1.0),
 (0.6540490973028769, 0.5108808124392363, 0.5624249638490563, 1.0),
 (0.6567332313892755, 0.5091589650387686, 0.5624462036019012, 1.0),
 (0.6594138579499981, 0.5074238647118555, 0.5624675188539079, 1.0),
 (0.6620910346020128, 0.5056753412121229, 0.5624889097321536, 1.0),
 (0.6647648179005916, 0.5039132204188838, 0.5625103763636554, 1.0),
 (0.6674352633651471, 0.5021373242104527, 0.562531918875371, 1.0),
 (0.6701024255042813, 0.5003474703320736, 0.5625535373941971, 1.0),
 (0.6727663578400686, 0.498543472258184, 0.5625752320469702, 1.0),
 (0.6754271129316106, 0.49672513904870863, 0.5625970029604663, 1.0),
 (0.6780847423978791, 0.49489227519907003, 0.5626188502613999, 1.0),
 (0.6807392969398814, 0.49304468048357114, 0.5626407740764252, 1.0),
 (0.6833908263621671, 0.49118214979179214, 0.5626627745321345, 1.0),
 (0.6860393795937001, 0.48930447295761476, 0.5626848517550591, 1.0),
 (0.6886850047081233, 0.48741143458046304, 0.5627070058716682, 1.0),
 (0.691327748943432, 0.48550281383832494, 0.5627292370083696, 1.0),
 (0.6939676587210779, 0.4835783842920861, 0.5627515452915087, 1.0),
 (0.6966047796645255, 0.48163791368067865, 0.5627739308473689, 1.0),
 (0.6992391566172786, 0.47968116370650965, 0.5627963938021711, 1.0),
 (0.7018708336603946, 0.4777078898106031, 0.5628189342820732, 1.0),
 (0.7044998541295057, 0.4757178409368413, 0.5628415524131709, 1.0),
 (0.707126260631361, 0.47371075928465817, 0.5628642483214965, 1.0),
 (0.7097500950599106, 0.4716863800494788, 0.5628870221330191, 1.0),
 (0.71237139861194, 0.46964443115016147, 0.5629098739736446, 1.0),
 (0.7149902118022778, 0.46758463294263103, 0.5629328039692149, 1.0),
 (0.7176065744785838, 0.46550669791884414, 0.5629558122455083, 1.0),
 (0.7202205258357363, 0.4634103303901533, 0.5629788989282393, 1.0),
 (0.7228321044298286, 0.46129522615407265, 0.5630020641430579, 1.0),
 (0.725441348191791, 0.45916107214336627, 0.5630253080155498, 1.0),
 (0.7280482944406445, 0.45700754605630345, 0.5630486306712363, 1.0),
 (0.7306529798964061, 0.4548343159668246, 0.5630720322355736, 1.0),
 (0.7332554406926485, 0.45264103991327437, 0.563095512833953, 1.0),
 (0.735855712388733, 0.45042736546423584, 0.5631190725917007, 1.0),
 (0.7384538299817189, 0.4481929292598964, 0.5631427116340775, 1.0),
 (0.7410498279179661, 0.4459373565272298, 0.5631664300862786, 1.0),
 (0.7436437401044345, 0.44366026056715313, 0.5631902280734336, 1.0),
 (0.7462355999196951, 0.44136124221164236, 0.5632141057206056, 1.0),
 (0.748825440224657, 0.4390398892486395, 0.5632380631527922, 1.0),
 (0.7514132933730231, 0.4366957758123727, 0.5632621004949242, 1.0),
 (0.7539991912214804, 0.4343284617365218, 0.5632862178718661, 1.0),
 (0.7565831651396319, 0.4319374918674215, 0.5633104154084152, 1.0),
 (0.7591652460196826, 0.42952239533423947, 0.5633346932293023, 1.0),
 (0.7617454642858827, 0.4270826847727947, 0.563359051459191, 1.0),
 (0.764323849903736, 0.4246178554993623, 0.5633834902226772, 1.0),
 (0.7669004323889812, 0.4221273846304726, 0.5634080096442895, 1.0),
 (0.7694752408163552, 0.4196107301443221, 0.5634326098484888, 1.0),
 (0.7720483038281386, 0.41706732987900036, 0.5634572909596679, 1.0),
 (0.7746196496424979, 0.41449660046224884, 0.5634820531021515, 1.0),
 (0.7771893060616218, 0.41189793616695314, 0.5635068964001959, 1.0),
 (0.7797573004796667, 0.40927070768596685, 0.5635318209779889, 1.0),
 (0.7823236598905072, 0.406614260819216, 0.5635568269596497, 1.0),
 (0.7848884108953067, 0.40392791506527986, 0.5635819144692282, 1.0),
 (0.7874515797099049, 0.40121096210882534, 0.5636070836307054, 1.0),
 (0.7900131921720345, 0.3984626641943216, 0.563632334567993, 1.0),
 (0.7925732737483662, 0.39568225237541943, 0.563657667404933, 1.0),
 (0.7951318495413914, 0.3928689246281748, 0.5636830822652975, 1.0),
 (0.7976889442961431, 0.3900218438149608, 0.5637085792727893, 1.0),
 (0.800244582406764, 0.3871401354843673, 0.5637341585510403, 1.0),
 (0.8027987879229209, 0.38422288549066236, 0.5637598202236124, 1.0),
 (0.8053515845560741, 0.38126913741439983, 0.563785564413997, 1.0),
 (0.807902995685604, 0.37827788976349913, 0.5638113912456146, 1.0),
 (0.8104530443647987, 0.3752480929315371, 0.563837300841815, 1.0),
 (0.8130017533267059, 0.3721786458870242, 0.5638632933258766, 1.0),
 (0.815549144989854, 0.36906839256401924, 0.5638893688210065, 1.0),
 (0.8180952414638462, 0.36591611792050327, 0.5639155274503403, 1.0),
 (0.8206400645548281, 0.36272054362638595, 0.563941769336942, 1.0),
 (0.8231836357708374, 0.35948032333772595, 0.5639680946038033, 1.0),
 (0.8257259763270318, 0.3561940375076259, 0.5639945033738442, 1.0),
 (0.8282671071508068, 0.35286018767707866, 0.5640209957699117, 1.0),
 (0.8308070488867971, 0.34947719018067763, 0.5640475719147812, 1.0),
 (0.8333458219017742, 0.34604336919223627, 0.5640742319311544, 1.0),
 (0.8358834462894336, 0.3425569490237772, 0.5641009759416605, 1.0),
 (0.8384199418750812, 0.3390160455776034, 0.5641278040688558, 1.0),
 (0.8409553282202205, 0.33541865683487304, 0.5641547164352227, 1.0),
 (0.8434896246270388, 0.3317626522446609, 0.5641817131631703, 1.0),
 (0.8460228501428, 0.32804576085421505, 0.5642087943750341, 1.0),
 (0.8485550235641447, 0.32426555799312534, 0.5642359601930753, 1.0),
 (0.8510861634412996, 0.3204194502903177, 0.5642632107394813, 1.0),
 (0.8536162880821969, 0.316504658761721, 0.5642905461363649, 1.0),
 (0.8561454155565107, 0.3125181996563464, 0.5643179665057643, 1.0),
 (0.8586735636996076, 0.3084568626870448, 0.564345471969643, 1.0),
 (0.8612007501164153, 0.30431718619632375, 0.56437306264989, 1.0),
 (0.8637269921852139, 0.3000954287133871, 0.5644007386683182, 1.0),
 (0.866252307061345, 0.2957875362408447, 0.564428500146666, 1.0),
 (0.8687767116808508, 0.29138910446137517, 0.5644563472065957, 1.0),
 (0.8713002227640342, 0.2868953348669181, 0.564484279969694, 1.0),
 (0.8738228568189498, 0.2823009835731454, 0.5645122985574718, 1.0),
 (0.8763446301448224, 0.2776003012731749, 0.5645404030913633, 1.0),
 (0.8788655588353994, 0.2727869623832353, 0.5645685936927272, 1.0),
 (0.881385658782234, 0.2678539809067245, 0.5645968704828447, 1.0),
 (0.8839049456779032, 0.2627936098456941, 0.5646252335829206, 1.0),
 (0.8864234350191639, 0.2575972200544052, 0.5646536831140829, 1.0),
 (0.8889411421100436, 0.2522551531627022, 0.5646822191973823, 1.0),
 (0.8914580820648738, 0.24675654145675752, 0.564710841953792, 1.0),
 (0.8939742698112609, 0.24108908518058997, 0.5647395515042074, 1.0),
 (0.8964897200930008, 0.2352387742921763, 0.5647683479694467, 1.0),
 (0.8990044474729371, 0.22918953677304285, 0.5647972314702498, 1.0),
 (0.901518466335763, 0.22292278835490312, 0.5648262021272782, 1.0),
 (0.9040317908907688, 0.2164168476958549, 0.5648552600611152, 1.0),
 (0.9065444351745395, 0.20964616444394688, 0.5648844053922655, 1.0),
 (0.9090564130535962, 0.20258028152726296, 0.5649136382411549, 1.0),
 (0.9115677382269928, 0.1951824107300414, 0.5649429587281305, 1.0),
 (0.9140784242288573, 0.18740742976175948, 0.5649723669734598, 1.0),
 (0.9165884844308909, 0.17919898554912392, 0.565001863097331, 1.0),
 (0.9190979320448162, 0.1704851632055215, 0.5650314472198528, 1.0),
 (0.9216067801247806, 0.16117174614756324, 0.5650611194610539, 1.0),
 (0.9241150415697144, 0.15113119988788565, 0.5650908799408831, 1.0),
 (0.9266227291256484, 0.14018351878271187, 0.5651207287792092, 1.0),
 (0.9291298553879817, 0.12806013786879714, 0.56515066609582, 1.0),
 (0.931636432803715, 0.11432806587112383, 0.5651806920104232, 1.0),
 (0.9341424736736371, 0.09820274574113065, 0.5652108066426454, 1.0),
 (0.9366479901544761, 0.07794779923475227, 0.5652410101120323, 1.0)]

_s_n_norm = Normalize(0, math.log10(1201), clip=True)
s_n_norm = lambda x: _s_n_norm(np.log10(np.array(x) + 1.0))
_s_n_x = np.linspace(0,1,256)

s_n_cm = _buildLinearSegmentedColormap(_s_n_x, _s_n, 's_n_cm')

# "Doppler Radar" colormap
#
_rain = [
         (  0,   0,   0,   0),  # 5
         (  0, 198,  85,  63),  # 10
         (  0, 165,  67,  95),  # 15
         (  0, 137,  55, 127),  # 20
         (  0, 109,  47, 155),  # 25
         (  0,  94,  40, 191),  # 30
         (255, 236,   0, 227),  # 35
         (249, 184,   0, 255),  # 40
         (255, 138,  41, 255),  # 45
         (244,  99,   0, 255),  # 50
         (232,   0,   0, 255),  # 55
         (178,   0,   0, 255),  # 60
         (234,   0, 139, 255),  # 65
         (169,   0, 204, 255),  # 70
         (114,   0, 114, 255),  # 75
        ]
_rain = np.array(_rain, dtype=np.float32) / 255.0

_mixed = [
         (  0,   0,   0,   0),  # 5
         (248, 185, 214,  63),  # 10
         (241, 172, 205,  95),  # 15
         (233, 158, 197, 127),  # 20
         (226, 145, 189, 155),  # 25
         (219, 131, 181, 191),  # 30
         (212, 118, 172, 227),  # 35
         (205, 105, 164, 255),  # 40
         (197,  91, 156, 255),  # 45
         (190,  78, 147, 255),  # 50
         (183,  64, 139, 255),  # 55
         (170,  40, 133, 255),  # 60
         (160,  39, 123, 255),  # 65
         (155,  22, 114, 255),  # 70
         (142,   7, 104, 255),  # 75
        ]
_mixed = np.array(_mixed, dtype=np.float32) / 255.0

_snow = [
         (  0,   0,   0,   0),  # 5
         ( 57, 222, 238,  63),  # 10
         ( 56, 206, 230,  95),  # 15
         ( 56, 190, 221, 127),  # 20
         ( 55, 174, 213, 155),  # 25
         ( 55, 158, 204, 191),  # 30
         ( 49, 140, 191, 227),  # 35
         ( 43, 123, 178, 255),  # 40
         ( 37, 105, 165, 255),  # 45
         ( 31,  88, 152, 255),  # 50
         ( 26,  70, 138, 255),  # 55
         ( 20,  53, 125, 255),  # 60
         ( 14,  35, 112, 255),  # 65
         (  8,  18,  99, 255),  # 70
         (  2,   0,  86, 255),  # 75
        ]
_snow = np.array(_snow, dtype=np.float32) / 255.0

doppler_norm_dbz = Normalize(5, 80, clip=True)

# determined relationship between dBZ and rain rate from
# http://www.wunderground.com/blog/wuproductteam/comment.html?entrynum=8
# used Excel and wolfram alpha to determine fit (r^2 > 0.98)
doppler_norm_in_per_hr = \
        lambda y: doppler_norm_dbz(44.0932 * y ** (2500.0/17061.0)) 
doppler_norm_kg_per_sqm = \
        lambda y: doppler_norm_dbz(44.0932 * (y/25.4) ** (2500.0/17061.0))  

_doppler_snow_cm = mpl.colors.ListedColormap(_snow, '_doppler_snow_cm')

def doppler_snow_cm(x):
    _x = np.array(x)
    assert np.max(_x) <= 1.0
    
    _x *= 14.9999999
    _x = np.array(np.floor(_x), dtype=np.uint8)
    
    return _doppler_snow_cm(_x)
    
_doppler_mixed_cm = mpl.colors.ListedColormap(_mixed, '_doppler_mixed_cm')

def doppler_mixed_cm(x):
    _x = np.array(x)
    assert np.max(_x) <= 1.0
    
    _x *= 14.9999999
    _x = np.array(np.floor(_x), dtype=np.uint8)
    
    return _doppler_mixed_cm(_x)

_doppler_rain_cm = mpl.colors.ListedColormap(_rain, '_doppler_rain_cm')

def doppler_rain_cm(x):
    _x = np.array(x)
    assert np.max(_x) <= 1.0
    
    _x *= 14.9999999
    _x = np.array(np.floor(_x), dtype=np.uint8)
    
    return _doppler_rain_cm(_x)

#
# Melt
#
_melt_x = np.linspace(0,1,256)
_melt = []
for _x in _melt_x:
    _melt.append((0.0, 0.0, _x, _x**0.25))
          
_melt_norm = Normalize(0, math.log10(8.0 + 1), clip=True)
melt_norm = lambda x: _melt_norm(np.log10(np.array(x) + 1.0))
melt_cm = _buildLinearSegmentedColormap(_melt_x, _melt, 'melt_cm')

#
# SWI
#

# Based on the CubicYF from the BSD licensed matlab package found here:
# http://it.mathworks.com/matlabcentral/fileexchange/28982-perceptually-improved-colormaps
#
# The colormap has monotonically increasing luminance over the valid
# data range, The purplish values toward the bottom end are removed to
# avoid confusion with the swe mapping
_swi =  [
         (0.0000, 0.0000, 0.0000, 0.000),
#         (0.5151, 0.0482, 0.6697, 1.000),
#         (0.5199, 0.1762, 0.8083, 1.000),
#         (0.4884, 0.2912, 0.9234, 1.000),
#         (0.4297, 0.3855, 0.9921, 1.000),
         (0.3893, 0.4792, 0.9775, 1.000),
         (0.3337, 0.5650, 0.9056, 1.000),
         (0.2795, 0.6419, 0.8287, 1.000),
         (0.2210, 0.7123, 0.7258, 1.000),
         (0.2468, 0.7612, 0.6248, 1.000),
         (0.2833, 0.8125, 0.5069, 1.000),
         (0.3198, 0.8492, 0.3956, 1.000),
         (0.3602, 0.8896, 0.2919, 1.000),
         (0.4568, 0.9136, 0.3018, 1.000),
         (0.6033, 0.9255, 0.3295, 1.000),
         (0.7066, 0.9255, 0.3414, 1.000),
         (0.8000, 0.9255, 0.3529, 1.000)
        ]  

_swi_x = range(len(_swi)-1)
_swi_x.insert(1, 0.1)
_swi_x = np.array(_swi_x) / _swi_x[-1]

swi_norm = Normalize(0, 120.0, clip=True)
swi_cm = _buildLinearSegmentedColormap(_swi_x, _swi, 'swi_cm')

#
# delta_Q
#

_delta_Q_norm = Normalize(-np.log10(700), np.log10(700), clip=True)
def delta_Q_norm(x):
    x = np.array(x)
    indx = np.where(x < 0)
    x[indx] = -1.0 * np.log10(np.abs(x[indx]) + 1.0)
    indx = np.where(x > 0)
    x[indx] = np.log10(x[indx] + 1.0)
    
    return _delta_Q_norm(x)

_delta_Q = [
            (0.0, 1.0, 1.0, 1.0),
            (0.45, 0.55, 1.0, 1.0),
            (0.46, 0.54, 1.0, 0.0),
#            (0.5, 0.5, 1.0, 0.0),
            (0.54, 0.45, 1.0, 0.0),
            (0.55, 0.44, 1.0, 1.0),
            (1.0, 0.0, 1.0, 1.0),
            ]
_delta_Q_x = [0.0, 0.45, 0.46, 0.54, 0.55, 1.0]
delta_Q_cm = _buildLinearSegmentedColormap(_delta_Q_x , _delta_Q, 'delta_Q_cm')

##delta_Q_cm = plt.get_cmap('cool')

def set_foregroundcolor(ax, color):
     '''For the specified axes, sets the color of the frame, major ticks,                                                             
         tick labels, axis labels, title and legend                                                                                   
     '''
     for tl in ax.get_xticklines() + ax.get_yticklines():
         tl.set_color(color)
     for spine in ax.spines:
         ax.spines[spine].set_edgecolor(color)
     for tick in ax.xaxis.get_major_ticks():
         tick.label1.set_color(color)
     for tick in ax.yaxis.get_major_ticks():
         tick.label1.set_color(color)
     ax.axes.xaxis.label.set_color(color)
     ax.axes.yaxis.label.set_color(color)
     ax.axes.xaxis.get_offset_text().set_color(color)
     ax.axes.yaxis.get_offset_text().set_color(color)
     ax.axes.title.set_color(color)
     lh = ax.get_legend()
     if lh != None:
         lh.get_title().set_color(color)
         lh.legendPatch.set_edgecolor('none')
         labels = lh.get_texts()
         for lab in labels:
             lab.set_color(color)
     for tl in ax.get_xticklabels():
         tl.set_color(color)
     for tl in ax.get_yticklabels():
         tl.set_color(color)
 
 
def set_backgroundcolor(ax, color):
     '''Sets the background color of the current axes (and legend).                                                                   
         Use 'None' (with quotes) for transparent. To get transparent                                                                 
         background on saved figures, use:                                                                                            
         pp.savefig("fig1.svg", transparent=True)                                                                                     
     '''
     ax.patch.set_facecolor(color)
     lh = ax.get_legend()
     if lh != None:
         lh.legendPatch.set_facecolor(color)
         
if __name__ == '__main__':

    
##    d = np.array(Luv_to_RGB([[40,41,42,42],[43,44,45,42]],
##                              [[50,50,50,42],[51,51,51,42]],
##                              [[0,0,0,42],[1,1,1,42]])).T
##
##    print(d)
##    print(d.shape)


##    _x = np.mgrid[0:11,0:11]
##    x = np.zeros((11,11), dtype=np.complex)
##    x.real = _x[0] / 10.0
##    x.imag = _x[1] / 10.0
##
##    rgb = radiation2d_cm(x)
##    print(rgb.shape)
##    print(rgb)
##
##    plt.figure()
##    plt.imshow(rgb)
##    plt.show()

    
    
##    data = [[j for j in xrange(1001)] for i in xrange(100)]
##    data = np.array(data, dtype=np.float32).T
##    data /= 1000.0

##    plt.figure()
##    plt.subplot(3, 1, 1)
##    plt.imshow(doppler_rain_cm(data))
##    
##    plt.subplot(3, 1, 2)
##    plt.imshow(doppler_mixed_cm(data))
##    
##    plt.subplot(3, 1, 3)
##    plt.imshow(doppler_snow_cm(data))
##    plt.show()
##    plt.close()

    
